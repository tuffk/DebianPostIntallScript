#!/bin/bash
#Autor: Jaime Margolin
if [ -z $1 ] || [ -z $2 ] || [ -z $3 ]|| [ -z $4 ]|| [ -z $5 ] || [ -z $6 ] || [ -z $7] || [ -z $8] || [ -z $9]
then 
  echo "Faltan opciones"
  echo "./Debian_Packages A B C D E F G H I"
  #echo "donde: N es la versión del script"
  echo "       A es 1 si se quiere instalar CUDA y además se tiene una tarjeta de video NVIDIA o 0 si no"
  echo "       B es 1 si se quire instalar LATEX para escribir papers o 0 si no"
  echo "       C es 1 si se quiere instalar STEAM para juegos o 0 si no"
  echo "       D es 1 si se quiere instalar Netbeans o 0 si no"
  echo "       E es 1 si se quiere el paquete de office (writer, spreadsheet, presentation) de kingsoft"
  echo "       F es 1 si se quiere el kit de programadores (git, R, octave, ruby, rails)"
  echo "       G es 1 si se quiere code lite (ide)"
  echo "       H es 1 si se quiere code blocks (ide)"
  echo "       I es 1 si se quiere scilab (ide)"
  exit 1
fi

FILE="/tmp/out.$$"
GREP="/bin/grep"
#....
# Make sure only root can run our script
if [ "$(id -u)" != "0" ]; then
   echo "¡NECESITAS SER ROOT!"
   exit 1
fi

if [ $1 -ne 0 ] && [ $1 -ne 1 ]
then
   echo "Caracter no valido en la opcion 1"
   exit 1
 elif [ $2 -ne 0 ] && [ $2 -ne 1 ]
 then
    echo "Caracter no valido en la opcion 2"
    exit 1
 elif [ $3 -ne 0 ] && [ $3 -ne 1 ]
 then
    echo "Caracter no valido en la opcion 3"
    exit 1
 elif [ $4 -ne 0 ] && [ $4 -ne 1 ]
 then
    echo "Caracter no valido en la opcion 4"
    exit 1
 elif [ $5 -ne 0 ] && [ $5 -ne 1 ]
 then
    echo "Caracter no valido en la opcion 5"
    exit 1
  elif [ $6 -ne 0 ] && [ $6 -ne 1 ]
 then
    echo "Caracter no valido en la opcion 6"
    exit 1
  elif [ $7 -ne 0 ] && [ $7 -ne 1 ]
 then
    echo "Caracter no valido en la opcion 7"
    exit 1
  elif [ $8 -ne 0 ] && [ $8 -ne 1 ]
 then
    echo "Caracter no valido en la opcion 8"
    exit 1
  elif [ $9 -ne 0 ] && [ $9 -ne 1 ]
 then
    echo "Caracter no valido en la opcion 9"
    exit 1
fi

echo "listo para instalar"

##detectar arquitectura con "arch"
##output para 64 bits :  x86_64
arki=$(arch)

apt-get update
apt-get upgrade

##instalas los paquetes que faltan
apt-get install -y g++                #instala el compilador de C/C++
apt-get install -y k3b                #instala k3b para quemar CD/DVD
apt-get install -y xfce4-xkb-plugin   #para mostrar y cambiar layouts de teclado
apt-get install -y gdb                #debugger de C/C++
apt-get isntall -y make               #make, para hacer ejecutables
apt-get install -y cmake              #open source cross platform make 
apt-get install -y cmake-curses-gui   #
apt-get install vim                   #debian no lo tiene por default asi que lo instalamos
apt-get install -y dia-libs           #diagramas
apt-get install -y vlc                #reproductor MEDIA VLC


#### drivers wifi
apt-add-repository 'deb http://http.debian.net/debian/ jessie main contrib non-free'
apt-get update
apt-get -y install firmware-iwlwifi
modprobe -r iwlwifi ; modprobe iwlwifi
## fin drivers wifi

add-apt-repository ppa:kirillshkrogalev/ffmpeg-next
apt-get update
apt-get install -y ffmpeg


##Instalacion de chrome
## https://www.google.com/intl/en/chrome/browser/
apt-get install -y libcurl3
wget --no-check-certificate https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
dpkg -i google-chrome-stable_current_amd64.deb
rm google-chrome-stable_current_amd64.deb

##Quitar los parquetes que no son seguros.
apt-get remove -y ftp
dpkg -r telnet
dpkg -P telnet
dpkg -r samba-common smbclient samba-common-bin
dpkg -P samba-common
dpkg -r transmission-gtk
dpkg -r transmission-common
dpkg -P transmission-gtk
dpkg -r pptp-linux network-manager-pptp network-manager-pptp-gnome
dpkg -P pptp-linux network-manager-pptp
dpkg -r ppp pppoeconf pppconfig
dpkg -P ppp pppoeconf pppconfig
dpkg -r rsync
dpkg -P rsync
dpkg -r vinagre
dpkg -P vinagre
dpkg -r blueman
dpkg -P blueman
dpkg -r bluez bluez-cups bluez-alsa
dpkg -P bluez
dpkg -r xchat xchat-common xchat-indicator
dpkg -P xchat
dpkg -r printer-driver-postscript-hp
dpkg -r hplip
dpkg -P hplip
dpkg -r hplip-data
dpkg -r printer-driver-hpcups
dpkg -r cups-filters-ippusbxd
dpkg -r printer-driver-pxljr
dpkg -r printer-driver-foo2zjs


###cerrar servicios inseguros
apt-get install -y nmap
nmap -sTU localhost
service avahi-daemon stop
service cups-browsed stop
service cups stop
systemctl stop avahi-daemon.service
systemctl stop avahi-daemon.socket
systemctl disable avahi-daemon.service
systemctl disable avahi-daemon.socket
systemctl stop cups.path
systemctl stop cups-browsed.service
systemctl stop cups.service
systemctl stop cups.socket
systemctl disable cups.path
systemctl disable cups-browsed.service
systemctl disable cups.service
systemctl disable cups.socket
echo "manual" >> /etc/init/avahi-daemon.override
echo "manual" >> /etc/init/cups-browsed.override
echo "manual" >> /etc/init/cups.override
##fin de servicios

# Entrar al menú principal -> Settings Manager -> Additional Drivers (en la sección Hardware) -> en la pestaña Additional Drivers -> marcar "Using NVIDIA binary driver - version 331.38 from nvidia-331 (propietary, tested)" -> click en el botón Apply Changes (pide password) -> click en Restart

###para CUDA y OPENGL
apt-get install -y freeglut3
apt-get install -y freeglut3-dev
apt-get install -y libglew-dev


#Obtener los nombres de los usuarios
ls -1 /home > users

# cambiar variables de ambiente a:
# export PATH=$JAVA_HOME/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/cuda/bin
# export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/usr/local/cuda/lib64/:/lib32:/usr/lib32

#Variables de ambiente de usuarios
cat users | while read LINE
do
  if [ -s /home/$LINE/.bashrc ]; then
    echo "export JAVA_HOME=/usr/java/default" >> /home/$LINE/.bashrc
    echo "export JAVA_HOME=/usr/java/default" >> /root/.bashrc
    echo "export ANDROID=/home/$LINE/Development/adt-bundle-linux-x86_64-20140702" >> /home/$LINE/.bashrc
    echo "export ANDROID=/home/$LINE/Development/adt-bundle-linux-x86_64-20140702" >> /root/.bashrc
    if [ $1 -eq 1 ] # Si CUDA
    then
      echo "export PATH=\$JAVA_HOME/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/cuda/bin:\$ANDROID/eclipse:\$ANDROID/sdk/platform-tools" >> /home/$LINE/.bashrc
      echo "export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/usr/local/cuda/lib64:/lib32:/usr/lib32" >> /home/$LINE/.bashrc
    else
      echo "export PATH=\$JAVA_HOME/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:\$ANDROID/eclipse:\$ANDROID/sdk/platform-tools" >> /home/$LINE/.bashrc
      echo "export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/lib32:/usr/lib32" >> /home/$LINE/.bashrc
    fi
    echo "export CLASSPATH=\$JAVA_HOME/jre/lib/rt.jar:." >> /home/$LINE/.bashrc
  fi
done

# variables de ambiente de root
if [ $1 -eq 1 ] # Si CUDA
then
  echo "export PATH=\$JAVA_HOME/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/cuda/bin:\$ANDROID/eclipse:\$ANDROID/sdk/platform-tools" >> /root/.bashrc
  echo "export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/usr/local/cuda/lib64:/lib32:/usr/lib32" >> /root/.bashrc
else
  echo "export PATH=\$JAVA_HOME/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:\$ANDROID/eclipse:\$ANDROID/sdk/platform-tools" >> /root/.bashrc
  echo "export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/lib32:/usr/lib32" >> /root/.bashrc
fi
echo "export CLASSPATH=\$JAVA_HOME/jre/lib/rt.jar:." >> /root/.bashrc
source /root/.bashrc

rm users


if [ $1 -eq 1 ] # si CUDA
then
  #wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_6.5-14_amd64.deb
  wget http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/rpmdeb/cuda-repo-ubuntu1410-7-0-local_7.0-28_amd64.deb
  dpkg -i cuda-repo-ubuntu1410-7-0-local_7.0-28_amd64.deb
  #dpkg -i cuda-repo-ubuntu1204_5.5-0_amd64.deb
  apt-get update
  ###apt-cache search cuda
# pero vuelve a instalar openjdk
  apt-get install -y cuda-7-0
  ###rm cuda-repo-ubuntu1204_5.5-0_amd64.deb
  rm cuda-repo-ubuntu1410-7-0-local_7.0-28_amd64.deb
fi


# instalacion de kingsoft para ambas arquitecturas
if [ $5 -eq 1 ]
then
  if [$arki -eq x86_64]
    then
      wget http://kdl.cc.ksosoft.com/wps-community/download/a19/wps-office_9.1.0.4975~a19p1_amd64.deb
      dpkg - i wps-office_9.1.0.4975-a19p1_amd64.deb
    else 
      wget http://kdl.cc.ksosoft.com/wps-community/download/a19/wps-office_9.1.0.4975~a19p1_i386.deb
      dpkg -i wps-office_9.1.0.4975-a19p1_i386.deb
    fi
fi

# Instalar Java de oracle y des instalar JAVA de linuxeros
dpkg -r --force-depends openjdk-7-jre openjdk-7-jre-headless
dpkg -r tzdata-java
dpkg -r --force-depends java-common default-jre default-jre-headless openjdk-7-jre-headless
dpkg -r icedtea-7-jre-jamvm
dpkg -P --force-depends openjdk-7-jre-headless java-common
dpkg -r --force-depends libservlet3.0-java ca-certificates-java libatk-wrapper-java libatk-wrapper-java-jni libhsqldb1.8.0-java
dpkg -P  ca-certificates-java libatk-wrapper-java-jni
dpkg -r libreoffice-sdbc-hsqldb


wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u45-b14/jdk-8u45-linux-x64.tar.gz
mkdir /usr/java
mv jdk-8u45-linux-x64.tar.gz /usr/java
#mv jdk-8u11-linux-x64.tar.gz /usr/java
cd /usr/java
tar zxvf jdk-8u45-linux-x64.tar.gz
#tar zxvf jdk-8u11-linux-x64.tar.gz
ln -s jdk1.8.0_45 latest
#ln -s jdk1.8.0_11 latest
ln -s latest default
ln -s /usr/java/default/jre/lib/amd64/libnpjp2.so /usr/lib/mozilla/plugins/libnpjp2.so
mkdir /etc/.java
mkdir /etc/.java/deployment
echo "deployment.system.config.mandatory=TRUE" >> /etc/.java/deployment/deployment.config
echo "deployment.system.config=file\:/etc/.java/deployment/deployment.properties" >> /etc/.java/deployment/deployment.config
echo "deployment.security.level=MEDIUM" >> /etc/.java/deployment/deployment.properties
cd

source $HOME/.bashrc
java -version
javac -version


# Ver para otras opciones: http://askubuntu.com/questions/451672/installing-and-testing-cuda-in-ubuntu-14-04
# Instaladores a mano .deb en http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1304/x86_64/

if [ $2 -eq 1 ] # si se quiere LATEX
then
  apt-get install -y texlive-full

#wget http://www.xm1math.net/texmaker/texmaker_ubuntu_14.10_4.4.1_amd64.deb
#dpkg -i texmaker_ubuntu_14.10_4.4.1_amd64.deb
#rm texmaker_ubuntu_14.10_4.4.1_amd64.deb

fi


apt-get install -y libc6:i386                                                   #GNU C Library: 32-bit shared libraries for AMD64
apt-get install -y libstdc++6:i386 libgcc1:i386 zlib1g:i386 libncurses5:i386
wget http://dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip
unzip adt-bundle-linux-x86_64-20140702.zip
ls -1 /home > users
cat users | while read LINE
do
  mkdir /home/$LINE/Development
  mv adt-bundle-linux-x86_64-20140702 /home/$LINE/Development
  chown -R $LINE.$LINE /home/$LINE/Development
done
rm users

if [ $3 -eq 1 ] # si se quiere STEAM ]
then
  #outdated
  # Bajar steam de http://store.steampowered.com/about/
  #apt-get install -y curl
  #dpkg -i steam_latest.deb
  
  #para debian 8 jessie
  #agregar a /etc/apt/sources.list 
  #deb http://http.debian.net/debian/ jessie main contrib non-free

  apt-get install -y gnuchess
  apt-get install -y xboard
  apt-get install -y scid
  apt-get install -y scid-rating-data
  apt-get install -y chessx
  apt-get install -y stockfish
  apt-get install -y curl

  echo "deb http://http.debian.net/debian/ jessie main contrib non-free" >> /etc/apt/sources.list 
  dpkg --add-architecture i386 #habilitar multi-arch
  aptitude update
  aptitude install steam
  #aptitude install libgl1-nvidia-glx:i386  #agregar nvidia graphics hardware
  #aptitude install libgl1-fglrx-glx:i386    #agregar ATI/AMD  graphics hardware
  ###falta determinar que tarjeta grafica tiene el usuario para instalar los drivers apropiados

fi

if [ $6 -eq 1 ] #Si instalamos Git, ruby, python y R
then
    apt-get install -y git 
    apt-get install -y git-core 
    apt-get install -y curl 
    apt-get install -y zlib1g-dev 
    apt-get install -y build-essential 
    apt-get install -y libssl-dev 
    apt-get install -y libreadline-dev 
    apt-get install -y libyaml-dev 
    apt-get install -y libsqlite3-dev 
    apt-get install -y sqlite3 
    apt-get install -y libxml2-dev 
    apt-get install -y libxslt1-dev 
    apt-get install -y libcurl4-openssl-dev 
    apt-get install -y python-software-properties libffi-dev
    ##Instalacion de ruby
    cd
    wget http://ftp.ruby-lang.org/pub/ruby/2.2/ruby-2.2.23.tar.gz
    tar -xzvf ruby-2.2.3.tar.gz
    cd ruby-2.2.3/
    ./configure
    make
    make install
    ruby -v
    
    echo "gem: --no-ri --no-rdoc" > ~/.gemrc
    gem install bundler
    
    ##Instalacion de rails
    add-apt-repository ppa:chris-lea/node.js
    apt-get update
    apt-get install nodejs
    gem install rails -v 4.2.4
    rails -v
	
    ##instalacion sshd
    apt-get install -y openssh-server    

    ##Instalacion de R
    apt-get install r-base

    ##instalacion de gnuplot
    apt-get install gnuplot

    ##Instalacion de GNU Octave
    apt-get install octave
fi

apt-get autoremove -y 
apt-get clean

if [ $7 -eq 1 ] #si se quiere code lite
then
#agregamos el repositorio a la lsita de sources (sources.list)
apt-key adv --fetch-keys http://repos.codelite.org/CodeLite.asc
apt-add-repository 'deb http://repos.codelite.org/debian/ jessie contrib'
apt-get update
apt-get install -y codelite wxcrafter
#lo instalamos usando apt-get ya que se agrego a la lsita
fi

if [ $4 -eq 1 ] # si se quiere netbeans
then
  apt-get install -y netbeans #version antigua, cambiar por una forma de descargar al version mas recietne
#apt-cache search netbeans 
fi

if [ $8 -eq 1 ] # si se quiere code blocks
then

apt-add-repository 'deb [arch=amd64,i386] https://apt.jenslody.de/stable jessie main'

sudo apt-get update
sudo apt-get install jens-lody-debian-keyring
fi

if [ $9 -eq 1 ] # si se quiere scilab
then
apt-get install -y scilab
apt-get install -y scilab-plotlib
fi


##finalizamos el script revisando que todos los paquetes se hayan isntalado correctamente con sus dependencias
##borramos los paquetes rotos
apt-get clean   # 
apt-get autoremove -y # remove de forma segura
apt-get install -fy #instalamos dependencias

